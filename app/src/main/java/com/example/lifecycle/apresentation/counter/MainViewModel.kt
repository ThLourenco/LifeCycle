package com.example.lifecycle.apresentation.counter

import androidx.lifecycle.LiveData
import androidx.lifecycle.ViewModel
import com.example.lifecycle.data.CounterRepositoryImpl
import com.example.lifecycle.domain.CounterRepository

class MainViewModel(
        //nossa depedencia do model
        private val repository: CounterRepository
): ViewModel() {
    //üõ† Como funciona?
    //MutableLiveData pode armazenar qualquer tipo de dado (String, Int, List, etc.).
    //Ele notifica automaticamente todos os observadores sempre que o valor muda.
    //Muito usado em conjunto com ViewModel para gerenciar estados da UI de forma segura.
        //PROGAM
    //private var _counter = MutableLiveData(0)
    //val counter: LiveData<Int> = _counter

    val counter: LiveData<Int> = repository.getCounter()

     var incrementBy = 1

    //BOAS PRATICAS
    //private var counter = 0
    //   private set
    //Torna o setter privado, ou seja, s√≥ pode ser modificado dentro da pr√≥pria classe.
    //O getter continua p√∫blico, ent√£o outros arquivos ou classes podem ler o valor de counter, mas n√£o podem alter√°-lo diretamente.
    //Resumo:
    //private set impede que a vari√°vel seja alterada fora da classe.
    //O valor pode ser lido normalmente (getter p√∫blico).
    //A √∫nica forma de modificar counter √© atrav√©s de m√©todos dentro da pr√≥pria classe (incrementar() no exemplo).

    fun increment(){
      repository.incrementCountBy(incrementBy)


    }
}

/*
class NumberLiveData(initial: Int = 0): MutableLiveData<Int>(initial) {
    override fun onActive() {
        super.onActive()
        Log.d("MainViewModel", "onActive")
    }

    override fun onInactive() {
        super.onInactive()
        Log.d("MainViewModel", "onInactive")
    }
}*/
    //Cria uma classe chamada NumberLiveData que herda de MutableLiveData<Int>.
    //Aceita um valor inicial (initial), que por padr√£o √© 0.
    //1Ô∏è‚É£ Otimiza√ß√£o de Recursos: Podemos usar onActive() para iniciar alguma opera√ß√£o quando a UI precisa de dados (exemplo: iniciar uma requisi√ß√£o de API).
//2Ô∏è‚É£ Evitar Processamento Desnecess√°rio: onInactive() pode ser usado para parar opera√ß√µes pesadas quando n√£o h√° observadores (exemplo: cancelar um timer ou desconectar um WebSocket).
//3Ô∏è‚É£ Depura√ß√£o: Ajuda a entender quando os dados est√£o sendo observados.